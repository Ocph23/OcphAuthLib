@layout AccountLayout
@page "/account-register"

@inject NavigationManager nav
@inject IAccountService accountService;

<div style="height:100vh; display: flex; justify-content:center; align-items:center">
    <div style="width: 30%; background-color:whitesmoke; padding:50px">
        <h3>Register</h3>
        <ErrorFormView Errors="@errors"></ErrorFormView>
        <form>
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">UserName/Email</label>
                <input @bind-value="model.UserName" type="@userNameType" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp">
            </div>
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">Password</label>
                <input @bind-value="model.Password" type="password" class="form-control" id="exampleInputPassword1">
            </div>
            <div class="mb-3">
                <label for="exampleInputPassword2" class="form-label">Confirm Password</label>
                <input @bind-value="confirmPassword" type="password" class="form-control" id="exampleInputPassword2">
            </div>
            <div class="d-flex justify-content-end">
                <button type="button" @onclick="RegisterCommand" class="btn btn-primary text-align:right">Submit</button>
            </div>
            <div class="d-flex flex-column">
                <p> Have Account ?  <a href="/account-login"> Login</a></p>
            </div>
        </form>
    </div>
</div>



@code {
    string userNameType = "email";
    string confirmPassword = string.Empty;
    RegisterRequest model = new RegisterRequest();
    Dictionary<string, string> errors = new Dictionary<string, string>();
    public async Task RegisterCommand()
    {
        errors.Clear();
        try
        {
            if (!model.Password.Equals(confirmPassword))
            {
                errors.Add("Not Same", "Password Not Equals !");
                return;
            }

            var hasAccount = await accountService.Register(model);
            if (hasAccount)
            {
                nav.NavigateTo("/");
            }
        }
        catch (OcphAuthClientException ex)
        {
            errors = ex.Errors.GetErrors();
        }
    }


}
